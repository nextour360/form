<?php

namespace QuillForms_UnitTest\Factories;

use WP_UnitTest_Factory_For_Thing;
use WP_UnitTest_Generator_Sequence;

/**
 * Unit test factory for forms.
 *
 * Note: The below @method notations are defined solely for the benefit of IDEs,
 * as a way to indicate expected return values from the given factory methods.
 *
 * @method int create( $args = array(), $generation_definitions = null )
 * @method WP_Post create_and_get( $args = array(), $generation_definitions = null )
 * @method int[] create_many( $count, $args = array(), $generation_definitions = null )
 */
class Form_Factory extends WP_UnitTest_Factory_For_Thing {

	public function __construct( $factory = null ) {
		parent::__construct( $factory );
		$this->default_generation_definitions = array(
			'post_status' => 'publish',
			'post_title'  => new WP_UnitTest_Generator_Sequence( 'Form %s' ),
			'post_type'   => 'quill_forms',
		);
	}

	/**
	 * Creates a post object.
	 *
	 * @since 1.1.3
	 * @param array $args Array with elements for the post.
	 *
	 * @return int The post ID on success. The value 0 on failure.
	 */
	public function create_object( $args ) {
		$post_id = wp_insert_post( $args );
		if ( $post_id ) {
			update_post_meta( $post_id, 'blocks', $this->get_random_blocks() );
		}
		return $post_id;
	}

	/**
	 * Updates an existing post object.
	 *
	 * @since 1.1.3
	 * @param int   $post_id ID of the post to update.
	 * @param array $fields  Post data.
	 *
	 * @return int The post ID on success. The value 0 on failure.
	 */
	public function update_object( $post_id, $fields ) {
		$fields['ID'] = $post_id;
		$post_id      = wp_update_post( $fields );
		if ( $post_id ) {
			update_post_meta( $post_id, 'blocks', $this->get_random_blocks() );
		}
		return $post_id;
	}

	/**
	 * Retrieves a post by a given ID.
	 *
	 * @since 1.1.3
	 * @param int $post_id ID of the post to retrieve.
	 *
	 * @return WP_Post|null WP_Post object on success, null on failure.
	 */
	public function get_object_by_id( $post_id ) {
		return get_post( $post_id );
	}

	/**
	 * Get random blocks
	 *
	 * @since 1.1.3
	 * @return array
	 */
	public function get_random_blocks() {
		// include ~2/3 (in average) of blocks.
		$random_blocks = array_filter(
			$this->get_blocks(),
			function() {
				return (bool) random_int( 0, 2 );
			}
		);
		// return all blocks if less than 2 is returned as random blocks.
		return count( $random_blocks ) > 2 ? $random_blocks : $this->get_blocks();
	}

	/**
	 * Get blocks that can be used in form.
	 * Generated by var_export() of a form blocks meta.
	 *
	 * @since 1.1.3
	 * @return array
	 */
	public function get_blocks() {
		return array(
			0 =>
			array(
				'id'         => 'm7b2qito4',
				'name'       => 'welcome-screen',
				'attributes' =>
				array(
					'buttonText'  => 'Let\'s Go!',
					'attachment'  =>
					array(),
					'description' => '',
					'label'       => 'Welcome !',
				),
			),
			1 =>
			array(
				'id'         => 'pdz0jtb7b',
				'name'       => 'short-text',
				'attributes' =>
				array(
					'setMaxCharacters' => false,
					'required'         => false,
					'attachment'       =>
					array(),
					'description'      => '',
					'label'            => 'What is your name ?',
				),
			),
			2 =>
			array(
				'id'         => '60p3cs5p0',
				'name'       => 'email',
				'attributes' =>
				array(
					'required'    => false,
					'attachment'  =>
					array(),
					'description' => '',
					'label'       => 'What is your email ?',
				),
			),
			3 =>
			array(
				'id'         => 'pocv6vzs1',
				'name'       => 'date',
				'attributes' =>
				array(
					'format'      => 'MMDDYYYY',
					'separator'   => '/',
					'required'    => false,
					'attachment'  =>
					array(),
					'description' => '',
					'label'       => 'What is your birthday ?',
				),
			),
			4 =>
			array(
				'id'         => 'a7jmtfsmc',
				'name'       => 'multiple-choice',
				'attributes' =>
				array(
					'choices'     =>
					array(
						0 =>
						array(
							'value' => '124e4567e89b',
							'label' => 'Videos Games',
						),
						1 =>
						array(
							'value' => 'd4tcnl77b1',
							'label' => 'Sports',
						),
						2 =>
						array(
							'value' => 'id0a4rbww8',
							'label' => 'Walking',
						),
					),
					'multiple'    => true,
					'required'    => false,
					'attachment'  =>
					array(),
					'description' => '',
					'label'       => 'What are your hobbies ?',
				),
			),
			5 =>
			array(
				'id'         => 'ephn2np68',
				'name'       => 'number',
				'attributes' =>
				array(
					'set_max'     => false,
					'max'         => 0,
					'set_min'     => false,
					'min'         => false,
					'required'    => false,
					'attachment'  =>
					array(),
					'description' => '',
					'label'       => 'What is your age ?',
				),
			),
			6 =>
			array(
				'id'         => 'len8ta31w',
				'name'       => 'statement',
				'attributes' =>
				array(
					'buttonText'     => 'Continue',
					'quotationMarks' => true,
					'required'       => false,
					'attachment'     =>
					array(),
					'description'    => '',
					'label'          => 'Keep going !',
				),
			),
			7 =>
			array(
				'id'         => '6iqadmvjg',
				'name'       => 'dropdown',
				'attributes' =>
				array(
					'choices'     =>
					array(
						0 =>
						array(
							'value' => '123e45z7o89b',
							'label' => 'Developer',
						),
						1 =>
						array(
							'value' => '0cz8vwnxub',
							'label' => 'Doctor',
						),
						2 =>
						array(
							'value' => 'l1pg6znitu',
							'label' => 'Farmer',
						),
						3 =>
						array(
							'value' => 'qtk3zouv4u',
							'label' => 'Cooker',
						),
					),
					'required'    => false,
					'attachment'  =>
					array(),
					'description' => '',
					'label'       => 'What is your job ?',
				),
			),
			8 =>
			array(
				'id'         => 's767k1mw4',
				'name'       => 'website',
				'attributes' =>
				array(
					'required'    => false,
					'description' => '',
					'label'       => 'What is your profile link ?',
				),
			),
			9 =>
			array(
				'id'         => 'w1824y8vd',
				'name'       => 'long-text',
				'attributes' =>
				array(
					'setMaxCharacters' => false,
					'required'         => false,
					'attachment'       =>
					array(),
					'description'      => '',
					'label'            => 'Tell us about yourself !',
				),
			),
		);
	}
}
